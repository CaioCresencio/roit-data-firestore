 async function(<params_replace>) {
        if(<params_validator_replace>) throw new Error('All parameters required, ref..: <params_replace>')

        let repositoryClassName = '<repositoryClassName_value>'
        let methodSignature = '<methodSignature_value>'

        const db = global.instances.globalDbFile.FirestoreInstance.getInstance()
        const cacheResolver = global.instances.cacheResolver
        const firestoreReadAuditResolver = global.instances.firestoreReadAuditResolver

        const environmentUtil = global.instances.environmentUtil
        if(environmentUtil.areWeTesting()) { 
            console.log('It was decreed that it is being executed try, no operation or effective transaction will be performed')
            return []
        }
        
        const result = await cacheResolver.getCacheResult(repositoryClassName, methodSignature, <params_replace>)
        
        if(result) {
            return result
        }

        const collection = db.collection('<collection_name_replace>')

        if(Number(global.instances.Environment.getProperty('firestore.debug'))) { console.debug('[DEBUG] Executing query >', "<query_predicate_replace>") }

        let collectionRef = collection<query_predicate_replace>
        collectionRef = global.instances.queryCreatorConfig.buildPaging(collectionRef, paging)
        const snapshot = await collectionRef.get()

        let items = []
        snapshot.forEach(doc => { 
            let element = { ...doc.data() }
            element.id = doc.id
            items.push(element)
        })

        await cacheResolver.cacheResult(repositoryClassName, methodSignature, items, <params_replace>)

        await firestoreReadAuditResolver.persistFirestoreRead({
            collection: '<collection_name_replace>',
            repositoryClassName: repositoryClassName,
            functionSignature: methodSignature,
            params: <params_replace>,
            queryResult: items
        })

        if(<is_one_row>) {
            return items[0]
        }        

        return items
}